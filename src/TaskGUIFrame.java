import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.io.*;import java.nio.file.Files;import javax.crypto.*;import javax.crypto.spec.SecretKeySpec;public class TaskGUIFrame  extends JFrame {  private JPanel mainPanel;  private JLabel headerLapel;  private JButton btnChoose;  private JButton btnEncrypt;  private File selectedFile ;  private static final String AES_ALGORITHM = "AES";  private static final String ENCRYPTED_FILE_EXTENSION = ".enc";  private JButton button1;  private JButton btnSaveEncrypted;  private File encryptedFile;  private JLabel filePathLabel;  private JLabel fileSizeLabel;  private JLabel fileExtensionLabel;  public TaskGUIFrame(){    setTitle("File  methods ");    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    setSize(400, 400);    // Initialize components    mainPanel = new JPanel();    headerLapel = new JLabel("File Chooser ");    btnChoose = new JButton("Choose File");    btnEncrypt = new JButton("Encrypt");    btnSaveEncrypted = new JButton("Save Encrypted");    btnChoose.setBackground(Color.GREEN);    btnEncrypt.setBackground(Color.GREEN);    filePathLabel = new JLabel("File Path: ");    fileSizeLabel = new JLabel("File Size: ");    fileExtensionLabel = new JLabel("File Extension: ");    // Add ActionListener to btnChoose    btnChoose.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        JFileChooser fileChooser = new JFileChooser();        int result = fileChooser.showOpenDialog(TaskGUIFrame.this);        if (result == JFileChooser.APPROVE_OPTION) {          selectedFile = fileChooser.getSelectedFile();          // -- Update labels after selection --          filePathLabel.setText("File Path: " + selectedFile.getAbsolutePath());          fileSizeLabel.setText("File Size: " + selectedFile.length() + " bytes");          fileExtensionLabel.setText("File Extension: " + getFileExtension(selectedFile));        }      }    });    // Add ActionListener to btnEncrypt    btnEncrypt.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        if (selectedFile != null) {          try {            encryptedFile=  encryptFile(selectedFile);            JOptionPane.showMessageDialog(TaskGUIFrame.this, "File encrypted successfully!");          } catch (Exception ex) {            JOptionPane.showMessageDialog(TaskGUIFrame.this, "Error encrypting file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);          }        } else {          JOptionPane.showMessageDialog(TaskGUIFrame.this, "Please select a file first!", "Error", JOptionPane.ERROR_MESSAGE);        }      }    });    btnSaveEncrypted.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        if (encryptedFile != null) {          JFileChooser fileChooser = new JFileChooser();          int result = fileChooser.showSaveDialog(TaskGUIFrame.this);          if (result == JFileChooser.APPROVE_OPTION) {            File destinationFile = fileChooser.getSelectedFile();            try {              Files.copy(encryptedFile.toPath(), destinationFile.toPath());              JOptionPane.showMessageDialog(TaskGUIFrame.this, "Encrypted file saved successfully!");            } catch (IOException ex) {              JOptionPane.showMessageDialog(TaskGUIFrame.this, "Error saving encrypted file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);            }          }        } else {          JOptionPane.showMessageDialog(TaskGUIFrame.this, "No encrypted file available to save!", "Error", JOptionPane.ERROR_MESSAGE);        }      }    });    mainPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 15)); // Left-aligned with 5 pixels vertical gap and 10 pixels horizontal gap    mainPanel.setPreferredSize(new Dimension(350, 300)); // Set a preferred size for the mainPanel to limit its width    Dimension panelSize = mainPanel.getSize();    int buttonY = 50; // Vertical position of the buttons    int buttonX = panelSize.width - 120; // Horizontal position of the buttons    btnChoose.setBounds(buttonX, buttonY, 100, 100);    btnEncrypt.setBounds(buttonX, buttonY + 120, 100, 100);    btnSaveEncrypted.setBounds(buttonX, buttonY + 240, 100, 100);    mainPanel.add(headerLapel);    mainPanel.add(btnChoose);    mainPanel.add(fileExtensionLabel);    mainPanel.add(filePathLabel);    mainPanel.add(fileSizeLabel);    mainPanel.add(btnEncrypt);    mainPanel.add(btnSaveEncrypted);    getContentPane().add(mainPanel);    setVisible(true);  }  private static File encryptFile(File file) throws Exception {    // Generate a random 256-bit AES key    for symmetric key    KeyGenerator keyGen = KeyGenerator.getInstance(AES_ALGORITHM);    keyGen.init(256);    SecretKey secretKey = keyGen.generateKey();    // Initialize the cipher with the key    Cipher cipher = Cipher.getInstance(AES_ALGORITHM);    cipher.init(Cipher.ENCRYPT_MODE, secretKey);    // Read the file into memory    byte[] fileBytes = Files.readAllBytes(file.toPath());    // Encrypt the file data    byte[] encryptedBytes = cipher.doFinal(fileBytes);    // Write the encrypted data to a new file    File encrFile = new File(file.getAbsolutePath() + ENCRYPTED_FILE_EXTENSION);    try (FileOutputStream fos = new FileOutputStream(encrFile)) {      fos.write(encryptedBytes);    }    return encrFile;  }  // Method to get file extension from absolute path  private String getFileExtension(File file) {    String fileName = file.getName();    int lastDotIndex = fileName.lastIndexOf('.');    if (lastDotIndex > 0) {      return fileName.substring(lastDotIndex + 1);    }    return "";  }}